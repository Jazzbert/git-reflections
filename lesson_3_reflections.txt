1. When would you want to use a remote repository rather than keeping all your work local?

    A couple of reasons come time mind.  First, when you want to work when you're not connected to the Internet.  That is less and less often.  Probably more importantly, when you're doing the testing/compiling/etc. on a local computer, it makes more sense to have the local copy and not work with the GitHub version.  Thinking through it further, you would probably end up making too many commits by working on-line unless you had ability to save without committing.

2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

    For one, changes made locally you don't want necessarily merged/overwritten with what's on GitHub.  If you're working on a change, you don't want other changes happening automatically that you aren't aware of.

3. Describe the differences between forks, clones, and branches.  When would you use one instead of another?

Forks are a copy of a repository on GitHub.  The fork references the original, but it does not update it.  Clones are local copies of a repository.  This can be either a copy of a repository on GitHub or a copy of another local repository.  Clones can be pushed to update the original repository. Branches are different lines of commits within a repository.  They can be merged with other branches, maintained separately, or discarded.

4. What is the benefit of having a copy of the last known state of the remote stored locally?

    You can work offline without connection to the remote.  Also, you can continue to work on a steady state environment without updates possibly having unexpected impact to what you're presently working on.

5. How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

    You can use e-mail or shared drives or other mechanisms.  Git/GitHub makes it easier to keep track of changes and merge things togehter.  Though there's a learning-curve to using Git...sometimes it may just be easier for smaller collaborations to pass around a file and/or work together.


